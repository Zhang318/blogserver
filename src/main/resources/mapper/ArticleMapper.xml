<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.blogserver.dao.ArticleMapper">
  <resultMap id="BaseResultMap" type="com.example.blogserver.model.entity.Article">
    <id column="article_id" jdbcType="VARCHAR" property="articleId" />
    <result column="uid" jdbcType="VARCHAR" property="uid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="publish_time" jdbcType="TIMESTAMP" property="publishTime" />
    <result column="last_edittime" jdbcType="TIMESTAMP" property="lastEdittime" />
    <result column="transfer_from" jdbcType="VARCHAR" property="transferFrom" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
    <result column="reads" jdbcType="INTEGER" property="reads" />
    <result column="visible" jdbcType="INTEGER" property="visible" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.blogserver.model.entity.ArticleWithBLOBs">
    <result column="md_content" jdbcType="LONGVARCHAR" property="mdContent" />
    <result column="html_content" jdbcType="LONGVARCHAR" property="htmlContent" />
    <result column="summary" jdbcType="LONGVARCHAR" property="summary" />
  </resultMap>
  <sql id="Base_Column_List">
    article_id, uid, title, publish_time, last_edittime, transfer_from, likes, reads, 
    visible
  </sql>
  <sql id="Blob_Column_List">
    md_content, html_content, summary
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from bl_table_article
    where article_id = #{articleId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from bl_table_article
    where article_id = #{articleId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.blogserver.model.entity.ArticleWithBLOBs">
    insert into bl_table_article (article_id, uid, title, 
      publish_time, last_edittime, transfer_from, 
      likes, reads, visible, 
      md_content, html_content, summary
      )
    values (#{articleId,jdbcType=VARCHAR}, #{uid,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, 
      #{publishTime,jdbcType=TIMESTAMP}, #{lastEdittime,jdbcType=TIMESTAMP}, #{transferFrom,jdbcType=VARCHAR}, 
      #{likes,jdbcType=INTEGER}, #{reads,jdbcType=INTEGER}, #{visible,jdbcType=INTEGER}, 
      #{mdContent,jdbcType=LONGVARCHAR}, #{htmlContent,jdbcType=LONGVARCHAR}, #{summary,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.blogserver.model.entity.ArticleWithBLOBs">
    insert into bl_table_article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="articleId != null">
        article_id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="publishTime != null">
        publish_time,
      </if>
      <if test="lastEdittime != null">
        last_edittime,
      </if>
      <if test="transferFrom != null">
        transfer_from,
      </if>
      <if test="likes != null">
        likes,
      </if>
      <if test="reads != null">
        reads,
      </if>
      <if test="visible != null">
        visible,
      </if>
      <if test="mdContent != null">
        md_content,
      </if>
      <if test="htmlContent != null">
        html_content,
      </if>
      <if test="summary != null">
        summary,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="articleId != null">
        #{articleId,jdbcType=VARCHAR},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="publishTime != null">
        #{publishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastEdittime != null">
        #{lastEdittime,jdbcType=TIMESTAMP},
      </if>
      <if test="transferFrom != null">
        #{transferFrom,jdbcType=VARCHAR},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
      <if test="reads != null">
        #{reads,jdbcType=INTEGER},
      </if>
      <if test="visible != null">
        #{visible,jdbcType=INTEGER},
      </if>
      <if test="mdContent != null">
        #{mdContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="htmlContent != null">
        #{htmlContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="summary != null">
        #{summary,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.blogserver.model.entity.ArticleWithBLOBs">
    update bl_table_article
    <set>
      <if test="uid != null">
        uid = #{uid,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="publishTime != null">
        publish_time = #{publishTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastEdittime != null">
        last_edittime = #{lastEdittime,jdbcType=TIMESTAMP},
      </if>
      <if test="transferFrom != null">
        transfer_from = #{transferFrom,jdbcType=VARCHAR},
      </if>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="reads != null">
        reads = #{reads,jdbcType=INTEGER},
      </if>
      <if test="visible != null">
        visible = #{visible,jdbcType=INTEGER},
      </if>
      <if test="mdContent != null">
        md_content = #{mdContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="htmlContent != null">
        html_content = #{htmlContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="summary != null">
        summary = #{summary,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where article_id = #{articleId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.blogserver.model.entity.ArticleWithBLOBs">
    update bl_table_article
    set uid = #{uid,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      publish_time = #{publishTime,jdbcType=TIMESTAMP},
      last_edittime = #{lastEdittime,jdbcType=TIMESTAMP},
      transfer_from = #{transferFrom,jdbcType=VARCHAR},
      likes = #{likes,jdbcType=INTEGER},
      reads = #{reads,jdbcType=INTEGER},
      visible = #{visible,jdbcType=INTEGER},
      md_content = #{mdContent,jdbcType=LONGVARCHAR},
      html_content = #{htmlContent,jdbcType=LONGVARCHAR},
      summary = #{summary,jdbcType=LONGVARCHAR}
    where article_id = #{articleId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.blogserver.model.entity.Article">
    update bl_table_article
    set uid = #{uid,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      publish_time = #{publishTime,jdbcType=TIMESTAMP},
      last_edittime = #{lastEdittime,jdbcType=TIMESTAMP},
      transfer_from = #{transferFrom,jdbcType=VARCHAR},
      likes = #{likes,jdbcType=INTEGER},
      reads = #{reads,jdbcType=INTEGER},
      visible = #{visible,jdbcType=INTEGER}
    where article_id = #{articleId,jdbcType=VARCHAR}
  </update>
</mapper>