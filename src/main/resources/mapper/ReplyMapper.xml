<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.blogserver.dao.ReplyMapper">
  <resultMap id="BaseResultMap" type="com.example.blogserver.model.entity.Reply">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="article_id" jdbcType="VARCHAR" property="articleId" />
    <result column="uid" jdbcType="VARCHAR" property="uid" />
    <result column="reply_id" jdbcType="VARCHAR" property="replyId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="reply_time" jdbcType="TIMESTAMP" property="replyTime" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
    <result column="visible" jdbcType="INTEGER" property="visible" />
  </resultMap>
  <sql id="Base_Column_List">
    id, article_id, uid, reply_id, content, reply_time, likes, visible
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bl_table_reply
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from bl_table_reply
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.blogserver.model.entity.Reply">
    insert into bl_table_reply (id, article_id, uid, 
      reply_id, content, reply_time, 
      likes, visible)
    values (#{id,jdbcType=VARCHAR}, #{articleId,jdbcType=VARCHAR}, #{uid,jdbcType=VARCHAR}, 
      #{replyId,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, #{replyTime,jdbcType=TIMESTAMP}, 
      #{likes,jdbcType=INTEGER}, #{visible,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.example.blogserver.model.entity.Reply">
    insert into bl_table_reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="articleId != null">
        article_id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="replyId != null">
        reply_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="replyTime != null">
        reply_time,
      </if>
      <if test="likes != null">
        likes,
      </if>
      <if test="visible != null">
        visible,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="articleId != null">
        #{articleId,jdbcType=VARCHAR},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="replyId != null">
        #{replyId,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="replyTime != null">
        #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
      <if test="visible != null">
        #{visible,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.blogserver.model.entity.Reply">
    update bl_table_reply
    <set>
      <if test="articleId != null">
        article_id = #{articleId,jdbcType=VARCHAR},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=VARCHAR},
      </if>
      <if test="replyId != null">
        reply_id = #{replyId,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="replyTime != null">
        reply_time = #{replyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="visible != null">
        visible = #{visible,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.blogserver.model.entity.Reply">
    update bl_table_reply
    set article_id = #{articleId,jdbcType=VARCHAR},
      uid = #{uid,jdbcType=VARCHAR},
      reply_id = #{replyId,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      reply_time = #{replyTime,jdbcType=TIMESTAMP},
      likes = #{likes,jdbcType=INTEGER},
      visible = #{visible,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>